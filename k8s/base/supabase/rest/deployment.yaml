apiVersion: apps/v1
kind: Deployment
metadata:
  name: supabase-rest
  labels:
    app.kubernetes.io/name: supabase-rest
    app.kubernetes.io/component: postgrest
    app.kubernetes.io/part-of: supabase
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: supabase-rest
  template:
    metadata:
      labels:
        app.kubernetes.io/name: supabase-rest
        app.kubernetes.io/component: postgrest
        app.kubernetes.io/part-of: supabase
    spec:
      initContainers:
      - name: ensure-db-roles
        image: postgres:15-alpine
        
        imagePullPolicy: Always
        env:
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: supabase-secrets
              key: POSTGRES_PASSWORD
        command:
          - sh
          - -c
          - |
            echo "Creating Supabase roles if they don't exist..."
            psql -h supabase-db -U postgres -d postgres <<EOF
            -- Create roles
            DO \$\$
            BEGIN
              IF NOT EXISTS (SELECT FROM pg_roles WHERE rolname = 'anon') THEN
                CREATE ROLE anon NOLOGIN;
              END IF;
              IF NOT EXISTS (SELECT FROM pg_roles WHERE rolname = 'authenticated') THEN
                CREATE ROLE authenticated NOLOGIN;
              END IF;
              IF NOT EXISTS (SELECT FROM pg_roles WHERE rolname = 'service_role') THEN
                CREATE ROLE service_role NOLOGIN BYPASSRLS;
              END IF;
              IF NOT EXISTS (SELECT FROM pg_roles WHERE rolname = 'authenticator') THEN
                CREATE ROLE authenticator NOINHERIT LOGIN PASSWORD '${PGPASSWORD}';
                GRANT anon, authenticated, service_role TO authenticator;
              END IF;
            END
            \$\$;
            
            -- Grant permissions
            GRANT USAGE ON SCHEMA public TO anon, authenticated, service_role;
            GRANT ALL ON ALL TABLES IN SCHEMA public TO anon, authenticated, service_role;
            GRANT ALL ON ALL SEQUENCES IN SCHEMA public TO anon, authenticated, service_role;
            GRANT ALL ON ALL ROUTINES IN SCHEMA public TO anon, authenticated, service_role;
            ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON TABLES TO anon, authenticated, service_role;
            ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON SEQUENCES TO anon, authenticated, service_role;
            ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON ROUTINES TO anon, authenticated, service_role;
            EOF
      containers:
      - name: postgrest
        image: postgrest/postgrest:v12.2.3
        
        imagePullPolicy: Always
        command:
          - sh
          - -c
          - |
            export PGRST_DB_URI="postgres://authenticator:${POSTGRES_PASSWORD}@supabase-db:5432/postgres"
            exec postgrest
        ports:
        - containerPort: 3000
          name: http
        env:
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: supabase-secrets
              key: POSTGRES_PASSWORD
        - name: PGRST_DB_SCHEMAS
          value: "public,storage,graphql_public"
        - name: PGRST_DB_ANON_ROLE
          value: "anon"
        - name: PGRST_JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: supabase-secrets
              key: JWT_SECRET
        - name: PGRST_DB_USE_LEGACY_GUCS
          value: "false"
        - name: PGRST_APP_SETTINGS_JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: supabase-secrets
              key: JWT_SECRET
        - name: PGRST_APP_SETTINGS_JWT_EXP
          value: "3600"
        - name: PGRST_SERVER_HOST
          value: "0.0.0.0"
        - name: PGRST_SERVER_PORT
          value: "3000"
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 512Mi