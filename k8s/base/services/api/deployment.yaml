apiVersion: apps/v1
kind: Deployment
metadata:
  name: invisible-api
  labels:
    app.kubernetes.io/name: invisible-api
    app.kubernetes.io/component: api
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: invisible-api
      app.kubernetes.io/component: api
  template:
    metadata:
      labels:
        app.kubernetes.io/name: invisible-api
        app.kubernetes.io/component: api
    spec:
      serviceAccountName: invisible-api
      initContainers:
      # Wait for schema migration job to complete before starting API
      - name: wait-for-schema
        image: bitnami/kubectl:latest
        command: ['sh', '-c']
        args:
        - |
          echo "Waiting for schema migration job to complete..."
          while true; do
            STATUS=$(kubectl get job invisible-schema-migrate -n invisible -o jsonpath='{.status.conditions[?(@.type=="Complete")].status}' 2>/dev/null || echo "")
            if [ "$STATUS" = "True" ]; then
              echo "Schema migration job completed successfully"
              break
            fi
            FAILED=$(kubectl get job invisible-schema-migrate -n invisible -o jsonpath='{.status.conditions[?(@.type=="Failed")].status}' 2>/dev/null || echo "")
            if [ "$FAILED" = "True" ]; then
              echo "Schema migration job failed - check job logs"
              exit 1
            fi
            echo "Schema migration still running, waiting..."
            sleep 5
          done
      containers:
      - name: api
        image: invisiblelife/api:latest
        ports:
        - containerPort: 4300
          name: http
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "4300"
        # Database
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: supabase-secrets
              key: POSTGRES_PASSWORD
        - name: POSTGRES_HOST
          value: "supabase-db.invisible.svc.cluster.local"
        - name: POSTGRES_PORT
          value: "5432"
        - name: POSTGRES_DB
          value: "postgres"
        - name: POSTGRES_USER
          value: "postgres"
        - name: POSTGRES_URL
          value: "postgresql://postgres:$(POSTGRES_PASSWORD)@supabase-db.invisible.svc.cluster.local:5432/postgres"
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: supabase-secrets
              key: POSTGRES_PASSWORD
        # Supabase services (internal)
        - name: SUPABASE_URL
          value: "http://supabase-kong.invisible.svc.cluster.local:8000"
        - name: NEXT_PUBLIC_SUPABASE_ANON_KEY
          valueFrom:
            secretKeyRef:
              name: supabase-secrets
              key: ANON_KEY
        - name: SUPABASE_JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: supabase-secrets
              key: JWT_SECRET
        # Internal service URLs
        - name: ETL_SERVICE_URL
          value: "http://invisible-etl.invisible.svc.cluster.local:4001"
        - name: UI_HUB_URL
          value: "http://ui-hub.invisible.svc.cluster.local"
        # Server configuration for external access
        - name: SERVER_IP
          valueFrom:
            configMapKeyRef:
              name: server-config
              key: SERVER_IP
        # External ports from configmap
        - name: EXTERNAL_API_PORT
          valueFrom:
            configMapKeyRef:
              name: service-endpoints
              key: EXTERNAL_API_PORT
        - name: EXTERNAL_SUPABASE_PORT
          valueFrom:
            configMapKeyRef:
              name: service-endpoints
              key: EXTERNAL_SUPABASE_KONG_PORT
        - name: EXTERNAL_UI_HUB_PORT
          valueFrom:
            configMapKeyRef:
              name: service-endpoints
              key: EXTERNAL_UI_HUB_PORT
        # Public URLs built from SERVER_IP and external ports
        - name: API_PUBLIC_URL
          value: "http://$(SERVER_IP):$(EXTERNAL_API_PORT)"
        - name: SUPABASE_PUBLIC_URL
          value: "http://$(SERVER_IP):$(EXTERNAL_SUPABASE_PORT)"
        - name: UI_HUB_PUBLIC_URL
          value: "http://$(SERVER_IP):$(EXTERNAL_UI_HUB_PORT)"
        - name: SUPABASE_ANON_KEY
          valueFrom:
            secretKeyRef:
              name: supabase-secrets
              key: ANON_KEY
        # Security
        - name: CREDENTIALS_ENCRYPTION_KEY
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: CREDENTIALS_ENCRYPTION_KEY
        - name: ENCRYPTION_ALGORITHM
          value: "aes-256-gcm"
        # CORS Configuration
        - name: CORS_ORIGINS
          value: "*"  # Allow all origins - the app should handle CORS properly
        - name: CORS_ENABLED
          value: "true"
        livenessProbe:
          httpGet:
            path: /health
            port: 4300
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 4300
          initialDelaySeconds: 5
          periodSeconds: 5